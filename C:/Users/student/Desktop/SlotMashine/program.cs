using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using InstagramApiSharp.API.Builder;
using InstagramApiSharp.API;
using InstagramApiSharp.Classes;
using InstagramApiSharp.Logger;
using InstagramApiSharp.Classes.Models;


namespace SlotMashine
{
    class Program
    {
        static void Main(string[]args)
        {
            Console.WriteLine(@"    _____/==========\_____   ");
            Console.WriteLine( "    | ------------------ |   ");
            Console.WriteLine("    | | {} || {} || {} | |   ");
            Console.WriteLine("    | ------------------ |   ");
            Console.WriteLine("    | <--SLOT MASHINE--> |   ");
            Console.WriteLine("    |====================|   ");
            Console.WriteLine("    |      ________      |   ");
            Console.WriteLine("    |      |<spin>|      |   ");
            Console.WriteLine("    |====================|   ");

            Console.WriteLine("[h] or [help] or [?] _ help, [r] or [respin] ['ENTER']  _ respin, [d] or [done] or [.]_ exit");
            
            string input = "";
            double balance = 10.00;
            string[] slots = new string[3]{"1","1","1"};

            while (input != "done" || balance > 0)
            {
                Console.Write("what next:  ");
                input = Console.ReadLine() ?? "respin";
                
                if(Filter(input) == "respin")
                {
                    FillArray(slots);
                    balance = balance - 1 + ThePrize(slots);
                    PrintFrame(slots, balance);
                }
                if(Filter(input) == "done")
                {
                    input = "done";
                }
            }
            
        }
        static void PrintFrame(string[] slots, double bal)
        {
            Console.WriteLine("-------------------");
            Console.WriteLine($"| {slots[0]} || {slots[1]} || {slots[2]} |");
            Console.WriteLine( "------------------");
            Console.WriteLine($" BALANCE:{bal}$ ");
        }
        static void FillArray(string[] array)
        {
            string[] Emojes = new string[7]{"1","2","3","4","5","#","*"}; //"🍓","🍆","🍍","🍌","🍉","🍎","🍋","🍊","🍇","🍀","7"
 
            Random rand = new Random();
            for(int i = 0; i < array.Length; i++)
            {
                array[i] = Emojes[rand.Next(0,Emojes.Length)];
            }
        }
        static string Filter(string str)
        {
            if(str == "r" || str == "R" || str == "")
                return "respin";
            if(str == "h" || str == "H" || str == "?")
                return "help";
            if(str == "d" || str == "D" || str == ".")
                return "done";
            
            List <char> res = new List<char>();

            for(int i = 0; i < str.Length; i++)
            {
                if(char.IsLetter(str[i]))
                    res.Add(char.Parse(str[i].ToString().ToLower()));
            }

            return res.ToString() ?? "respin";
        }
        static double ThePrize(string[] array)
        {
            bool twoSameNums;
            if(AllSame(array,out twoSameNums))
            {
                return 10;
            }
            else
            {
                return 0;
            }
        }
        static bool AllSame(string[] array, out bool twoSameNums)
        {
            int sameNums = 0;
            for (int i = 1; i < array.Length; i++)
            {
                if(array[i] == array[i - 1])
                {
                    sameNums++;
                }
            }
            
            if(sameNums == 1)
                twoSameNums = true;
            else
                twoSameNums = false;
            

            if(sameNums == 2)
                return true;
            else
                return false;
        }

    }




        /*static async Task Main(string[] args)
        {
            UserSessionData userSession = new UserSessionData
            {
                UserName = "thatmemeguy35",
                Password = "meme35!!"
            };

            IInstaApi api = InstaApiBuilder.CreateBuilder()
            .SetUser(userSession)
            .UseLogger(new DebugLogger(LogLevel.All))
            .Build();
            
            // Log in to Instagram
            var loginResult = await api.LoginAsync();


        
            if (loginResult.Succeeded)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Logged in successfully!");
                Console.ResetColor();

                //string onlineImageUrl = "memes/frog.jpg";

                byte[] imageByte = File.ReadAllBytes(@"C:\\Users\student\Desktop\IgBot2C\memes\meme0.png");

                var MediaImage = new InstaImageUpload
                { 
                    Height = 1080, 
                    Width = 1080,  
                    ImageBytes = imageByte
                    //Uri = @"\Users\student\Desktop\IgBot2C\memes\frog.jpg"
                };
                var postResult = await api.MediaProcessor.UploadPhotoAsync(MediaImage, "meme 1!!");
    
                if (postResult.Succeeded)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Meme posted successfully!");
                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"Meme posting failed: {postResult.Info.Message}");
                    Console.ResetColor();
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Login failed: {loginResult.Info.Message}");
                Console.ResetColor();
            }


        }*/
}


/*
static void Main(string[]args)
        {
            string path = @"C:\\Users\student\Desktop\IgBot2C\corect path.txt";
            int stringsToDelete = 1;

            string[] lines = File.ReadAllLines(path);

            if(stringsToDelete >= 1 && stringsToDelete <= lines.Length)
            {
                int lineIndex = stringsToDelete - 1;

                StringBuilder newContent = new StringBuilder();

                for(int i = 0; i < lines.Length; i++)
                {
                    if(i != lineIndex)
                    {
                        newContent.Append(lines[i]);
                        if(i < lines.Length - 1)
                            newContent.AppendLine();
                    }
                }
                File.WriteAllText(path,newContent.ToString());
            }
*/